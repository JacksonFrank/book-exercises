# Install devtools package: allows installations from GitHub
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
Vehicles[Vehicles$year = "1997", ]
# Filter the data set for vehicles manufactured in 1997
Vehicles[Vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == "1997", ]
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- mean(vehicles_1997$hwy, vehicles_1997$cty)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty) / 2
View(vehicles_1997)
View(vehicles_1997)
# Filter the whole vehicles data set for 2-Wheel Drive vehicles that get more
# than 20 miles/gallon in the city.
# Save this new data frame in a variable.
vehicles_2_wheel_20_cty <- vehicles[vehicles$drive == "2-Wheel Drive" & vehicles$cty > 20, ]
View(vehicles_2_wheel_20_cty)
View(vehicles_2_wheel_20_cty)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle <- vehicles_2_wheel_20_cty[vehicles_2_wheel_20_cty[, "hwy"] == min(vehicles_2_wheel_20_cty[, "hwy"]), ]
View(worst_vehicle)
View(worst_vehicle)
# Of the above vehicles, what is the vehicle ID of the vehicle with the worst
# hwy mpg?
# Hint: filter for the worst vehicle, then select its ID.
worst_vehicle_id <- vehicles_2_wheel_20_cty[vehicles_2_wheel_20_cty[, "hwy"] == min(vehicles_2_wheel_20_cty[, "hwy"]), "id"]
# Install and load the "dplyr" library
install.packages("dplyr")
library("dplyr")
# Install and load the "fueleconomy" package
#install.packages("devtools")
#devtools::install_github("hadley/fueleconomy")
library(fueleconomy)
# Select the different manufacturers (makes) of the cars in this data set.
# Save this vector in a variable
makes <- select(vehicles, make)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
make_number <- distinct(makes)
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
make_number <- length(distinct(makes))
# Use the `distinct()` function to determine how many different car manufacturers
# are represented by the data set
make_number <- nrow(distinct(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- filter(vehicles, year == 1997)
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-11-exercises/exercise-2/exercise.R')
install.packages("dplyr")
View(vehicles_1997)
View(vehicles_1997)
?arrange
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
library("dplyr")
# Arrange the 1997 cars by highway (`hwy`) gas milage
arrange(vehicles_1997, hwy)
# Arrange the 1997 cars by highway (`hwy`) gas milage
vehicles_1997 <- arrange(vehicles_1997, hwy)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
mutate(vehicles_1997, average = (hwy + cty) / 2)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997 <- mutate(vehicles_1997, average = (hwy + cty) / 2)
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-11-exercises/exercise-1/exercise.R')
install.packages("devtools")
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles_1997 <- order(vehicles_1997$hwy)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Install devtools package: allows installations from GitHub
install.packages("devtools")
install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy", force = TRUE)
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
# Filter the data set for vehicles manufactured in 1997
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
vehicles_1997 <- vehicles_1997[order(vehicles_1997$hwy), ]
View(vehicles_1997)
View(vehicles_1997)
# You should now have access to the `vehicles` data frame
# You can use `View()` to inspect it
View(vehicles)
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy ,decreasing = TRUE)[1]
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[vehicles$hwy == hwy_effeciency, ][1]
return(effecient_vehicle$)
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy ,decreasing = TRUE)[1]
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$)
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy ,decreasing = TRUE)[1]
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$model)
}
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy ,decreasing = TRUE)[1]
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[vehicles$hwy == hwy_effeciency, ][1]
return(effecient_vehicle$model)
}
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy ,decreasing = TRUE)[1]
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$model)
}
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy ,decreasing = TRUE)[1]
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[selected_vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$model)
}
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy , decreasing = TRUE)[1]
print(hwy_effeciency)
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
effecient_vehicle <- selected_vehicles[selected_vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$model)
}
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
hwy_effeciency <- sort(vehicles$hwy , decreasing = TRUE)[1]
print(hwy_effeciency)
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
View(selected_vehicles)
effecient_vehicle <- selected_vehicles[selected_vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$model)
}
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# Write a function that takes a `year_choice` and a `make_choice` as parameters,
# and returns the vehicle model that gets the most hwy miles/gallon of vehicles
# of that make in that year.
# You'll need to filter more (and do some selecting)!
most_effecient <- function(year_choice, make_choice) {
selected_vehicles <- vehicles[vehicles$year == year_choice & vehicles$make == make_choice, ]
hwy_effeciency <- sort(selected_vehicles$hwy , decreasing = TRUE)[1]
effecient_vehicle <- selected_vehicles[selected_vehicles$hwy == hwy_effeciency, ]
return(effecient_vehicle$model)
}
# What was the most efficient Honda model of 1995?
print(most_effecient(1995, "Honda"))
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
library("dplyr")
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("nycflights13")
library(dplyr)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library(nycflights13)
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
install.packages("nycflights13")
library(nycflights13)
library(dplyr)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
View(flights)
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, flight_delay = arr_delay - dep_delay)
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-11-exercises/exercise-4/exercise.R')
View(flights)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -flight_delay)
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-11-exercises/exercise-4/exercise.R')
View(flights)
View(flights)
library(nycflights13)
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, flight_delay = arr_delay - dep_delay)
library(nycflights13)
library(dplyr)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
flights <- mutate(flights, flight_delay = arr_delay - dep_delay) %>% arrange(-flight_delay)
View(flights)
View(flights)
# Make a histogram of the amount of time gained using the `hist()` function
?hist
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-11-exercises/exercise-4/exercise.R')
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
nrow(flights)
ncol(flights)
colnames(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained = dep_delay - arr_delay)
library(nycflights13)
library(dplyr)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, time_gained = dep_delay - arr_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$time_gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
mean(flights$time_gained, na.rm = TRUE)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
print(mean(flights$time_gained, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_flights <- select(flights, dest == "SEA", origin, dest, time_gained)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_flights <- select(filter(flights, dest == "SEA"), origin, dest, time_gained)
View(seatac_flights)
View(seatac_flights)
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
seatac_flights <- filter(flights, dest == "SEA") %>% select(origin, dest, time_gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(select(flights, time_gained))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
print(mean(select(flights, time_gained), na.rm = TRUE))
# Make a histogram of the amount of time gained using the `hist()` function
hist(pull(flights, time_gained))
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
print(mean(pull(flights, time_gained), na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
print(mean(pull(seatac_flights, time_gained)))
# On average, did flights to SeaTac gain or loose time?
print(mean(pull(seatac_flights, time_gained), na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
print(paste("Min:", min(pull(seatac_flights, time_gained), na.rm = TRUE), "Max:", max(pull(seatac_flights, time_gained), na.rm = TRUE),
"Average:", mean(pull(seatac_flights, time_gained), na.rm = TRUE)))
