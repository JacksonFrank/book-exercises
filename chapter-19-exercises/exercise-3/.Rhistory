# Load the shiny, ggplot2, and dplyr libraries
library("shiny")
library("ggplot2")
library("dplyr")
# You will again be working with the `diamonds` data set provided by ggplot2
# Use dplyr's `sample_n()` function to get a random 1000 rows from the data set
# Store this sample in a variable `diamonds_sample`
diamonds_sample <- sample_n(diamonds, 1000)
View(diamonds_sample)
View(diamonds_sample)
# For convenience store the `range()` of values for the `price` column
# (of your sample)
price_range <- range(diamonds_sample, price)
?range
# For convenience store the `range()` of values for the `price` column
# (of your sample)
price_range <- range(diamonds_sample$price)
# For convenience, get a vector of column names from the `diamonds` data set to
# use as select inputs
diamond_col_names <- colnames(diamonds_sample)
# Define a variable `price_input` that is a `sliderInput()` with the following
# properties:
# - an inputId of `price_choice`
# - a label of "Price (in dollars)"
# - min and max valuesvalue based on the `price_range` calculated above
# - a current value equal to the price range
price_input <- sliderInput(
inputId = "price_choice",
label = "Price (in dollars)",
min = price_range[1],
max = price_range[2],
value = price_range
)
# A plotOutput showing the 'plot' output (based on the user specifications)
my_ui <- fluidPage(
price_input
)
# Be sure and return the completed plot!
my_server <
# Create a new `shinyApp()` using the above ui and server
shinyapp(ui = my_ui)
}
# Be sure and return the completed plot!
my_server <- function(input, output) {
}
# Create a new `shinyApp()` using the above ui and server
shinyapp(ui = my_ui, server = my_server)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
# Define a variable `feature_input` that is a `selectInput()` with the
# label "Feature of Interest". This dropdown should let the user pick one of
# the columns of the diamond data set. Use the `carat` column as a default
# Make sure to set an inputId to reference in your server!
feature_input <- selectInput(
inputId = "feature_input",
label = "Feature of Interest",
choices = diamond_col_names,
selected = "carat"
)
# A plotOutput showing the 'plot' output (based on the user specifications)
my_ui <- fluidPage(
titlePanel(title = "Diamond Viewer"),
price_input,
feature_input,
checkboxInput(label = "Show Trendline", inputId = "show_trend")
)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
# A plotOutput showing the 'plot' output (based on the user specifications)
my_ui <- fluidPage(
titlePanel(title = "Diamond Viewer"),
price_input,
feature_input,
checkboxInput(label = "Show Trendline", inputId = "show_trend", value = TRUE)
)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
# A plotOutput showing the 'plot' output (based on the user specifications)
my_ui <- fluidPage(
titlePanel(title = "Diamond Viewer"),
price_input,
feature_input,
checkboxInput(label = "Show Trendline", inputId = "show_trend", value = TRUE)
plotOutput(outputId = "plot")
)
# A plotOutput showing the 'plot' output (based on the user specifications)
my_ui <- fluidPage(
titlePanel(title = "Diamond Viewer"),
price_input,
feature_input,
checkboxInput(label = "Show Trendline", inputId = "show_trend", value = TRUE),
plotOutput(outputId = "plot")
)
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2]) %>%
select("price", input$feature_input)
})
print(filtered_data)
print(filtered_data)
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2]) %>%
select("price", input$feature_input)
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2]) %>%
select("price", input$feature_input)
print(filtered_data)
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
ggplot(data = filtered_data) + geom_point(mapping = aes(x = input$feature_choice, y = price, color = cut))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
ggplot(data = filtered_data) +
geom_point(mapping = aes(
x = input$feature_choice,
y = price,
color = cut))
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = my_ui, server = my_server)
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
ggplot(data = filtered_data) +
geom_point(mapping = aes(
x = input$feature_input,
y = price,
color = cut))
})
}
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
ggplot(data = filtered_data) +
geom_point(mapping = aes(
x = input$feature_input,
y = "price",
color = "cut"))
})
}
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
ggplot(data = filtered_data) +
geom_point(mapping = aes_string(
x = input$feature_input,
y = "price",
color = "cut"))
})
}
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
ggplot(data = filtered_data) +
geom_point(mapping = aes_string(
x = input$feature_input,
y = "price",
color = "cut"))
})
}
runApp()
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
the_plot <- ggplot(data = filtered_data) +
geom_point(mapping = aes_string(
x = input$feature_input,
y = "price",
color = "cut"))
if(input$show_trend == TRUE) {
the_plot + geom_smooth()
}
return(the_plot)
})
}
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
the_plot <- ggplot(data = filtered_data) +
geom_point(mapping = aes_string(
x = input$feature_input,
y = "price",
color = "cut"))
if(input$show_trend == TRUE) {
the_plot + geom_smooth(se = FALSE)
}
return(the_plot)
})
}
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
the_plot <- ggplot(data = filtered_data) +
geom_point(mapping = aes_string(
x = input$feature_input,
y = "price",
color = "cut"))
if(input$show_trend == TRUE) {
the_plot <- the_plot + geom_smooth(se = FALSE)
}
return(the_plot)
})
}
runApp()
# Be sure and return the completed plot!
my_server <- function(input, output) {
output$plot <- renderPlot({
filtered_data <- diamonds_sample %>% filter(price >= input$price_choice[1], price <= input$price_choice[2])
the_plot <- ggplot(data = filtered_data,
mapping = aes_string(
x = input$feature_input,
y = "price",
color = "cut")) +
geom_point()
if(input$show_trend == TRUE) {
the_plot <- the_plot + geom_smooth(se = FALSE)
}
return(the_plot)
})
}
install.packages("rsconnect")
rsconnect::setAccountInfo(name='jacksonfrank', token='22BFA4E9EF96E141F3EA6B2ECD16C33D', secret='i2ENMnsvxQ0gD+QIZm31/V6Go/lEn922I61QqIeC')
library(rsconnect)
runApp()
