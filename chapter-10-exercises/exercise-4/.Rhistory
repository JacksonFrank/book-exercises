# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", [1:100])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", c[1:100])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", c([1:100])
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", seq(from = 1, to = 100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(min = 40000, max = 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(1, min = 40000, max = 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(2, min = 40000, max = 50000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
random_salaries <- runif(100, min = 40000, max = 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <= runif(100, -5000, 10000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <= runif(100, min = -5000, max = 10000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- runif(100, min = -5000, max = 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, random_salaries, salary_adjustments, stringsAsFactors = FALSE)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
starting_salaries <- runif(100, min = 40000, max = 50000)
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$raises <- salaries$salary_adjustments > 0
# What was the 2018 salary of Employee 57
print(salaries[salaries_2018, "Employee 5"])
# What was the 2018 salary of Employee 57
print(salaries["salaries_2018", "Employee 5"])
# What was the 2018 salary of Employee 57
print(salaries["Employee 5", "salaries_2018"])
# What was the 2018 salary of Employee 57
print(salaries["Employee 5", ])
# What was the 2018 salary of Employee 57
print(salaries["Employee 4", ])
# What was the 2018 salary of Employee 57
salaries["Employee 4", ]
# What was the 2018 salary of Employee 57
salaries
# What was the 2018 salary of Employee 57
salaries[4, ]
# What was the 2018 salary of Employee 57
salaries[5, ]
# What was the 2018 salary of Employee 57
salaries[5, "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries["Employee 5", "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[5, "salaries_2018"]
# What was the 2018 salary of Employee 57
salaries[57, "salaries_2018"]
# How many employees got a raise?
nrow(salaries$raises)
# How many employees got a raise?
sum(salaries$raises)
# What was the dollar value of the highest raise?
?sort
# What was the dollar value of the highest raise?
employees_sorted <- salaries$salary_adjustments
# What was the dollar value of the highest raise?
salary_adjustments_sorted <- sort(salaries$salary_adjustments)
# What was the dollar value of the highest raise?
salary_adjustments_sorted <- sort(salaries$salary_adjustments, decreasing = TRUE)
salaries[salary_adjustments_sorted[0], "employees"]
salaries[,"employees"]
salaries[salary_adjustments_sorted[0], ]
salaries[salary_adjustments_sorted[0],]
salaries[salary_adjustments_sorted[1],]
# What was the dollar value of the highest raise?
salary_adjustments_sorted <- sort(salaries$salary_adjustments, decreasing = TRUE)[1]
salaries[salary_adjustments_sorted,]
salaries[salary_adjustments_sorted, "employees"]
# What was the dollar value of the highest raise?
highest_raise <- sort(salaries$salary_adjustments, decreasing = TRUE)[1]
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# What was the "name" of the employee who received the highest raise?
salaries[highest_raise,]
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustments <- round(runif(100, min = -5000, max = 10000))
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# What was the "name" of the employee who received the highest raise?
salaries[highest_raise,]
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the largest decrease in salaries between the two years?
lowest_raise <- sort(salaries$salary_adjustments)[1]
print(lowest_raise)
# What was the dollar value of the highest raise?
highest_raise <- max(salaries$salary_adjustments)
print(highest_raise)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustments == highest_raise, "employees"]
# What was the name of the employee who recieved largest decrease in salary?
salaires[salaries$salary_adjustments == lowest_raise, "employees"]
# What was the name of the employee who recieved largest decrease in salary?
salaries[salaries$salary_adjustments == lowest_raise, "employees"]
# What was the average salary change?
mean(salaries$salary_adjustments)
# For people who did not get a raise, how much money did they lose on average?
mean(salaries$salary_adjustments[salaries$raises == FALSE])
source('C:/Users/jacks/Dev/INFO201/book-exercises/chapter-10-exercises/exercise-2/exercise.R')
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
setwd("C:/Users/jacks/Dev/INFO201/book-exercises/chapter-10-exercises/exercise-4")
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
View(grants)
# Use the View function to look at the loaded data
view(grants)
# Use the `read.csv()` function to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the View function to look at the loaded data
view(grants)
# Use the View function to look at the loaded data
?view
# Use the View function to look at the loaded data
View(grants)
# Create a variable `organization` that contains the `organization` column of
# the dataset
organization <- grants[, "organization"]
# Confirm that the "organization" column is a vector using the `is.vector()`
# function.
# This is a useful debugging tip if you hit errors later!
is.vector(organization)
# What was the mean grant value?
?mean
# What was the mean grant value?
mean(grants[, "total_amount"])
# What was the dollar amount of the largest grant?
?sort
# What was the dollar amount of the largest grant?
sort(grant[, "total_amount"])[1]
# What was the dollar amount of the largest grant?
sort(grants[, "total_amount"])[1]
# What was the dollar amount of the largest grant?
sort(grants[, "total_amount"], decreasing = TRUE)[1]
# What was the dollar amount of the smallest grant?
sort(grants[, "total_amount"])[1]
# Which organization received the largest grant?
grants[grants[, "total_amount"] == sort(grants[, "total_amount"], decreasing = TRUE)[1], "organization"]
# Which organization received the smallest grant?
grants[grants[, "total_amount"] == sort(grants[, "total_amount"])[1], "organization"]
# How many grants were awarded in 2010?
nrows(grants[grants[, "start_year"] == 2010], )
# How many grants were awarded in 2010?
nrow(grants[grants[, "start_year"] == 2010], )
# How many grants were awarded in 2010?
nrow(grants[grants[, "start_year"] == 2010])
# How many grants were awarded in 2010?
sum(grants[grants[, "start_year"] == 2010], )
# How many grants were awarded in 2010?
sum(grants[grants[, "start_year"] == 2010, ])
# How many grants were awarded in 2010?
nrow(grants[grants[, "start_year"] == 2010, ])
